use super::{ConnectionInfo, VoiceClient, VoiceClientSession, options::Token};
use crate::crypto::{AEAD_KEY_LEN, EncryptMode, XChaCha20Poly1035};

use pretty_assertions::assert_eq;
use std::net::{IpAddr, Ipv4Addr};
use twilight_model::id::Id;

// static TEST_RTP_HEADERS: &[&str] = &[
//     // sequential thing here
//     "8078efafba6ef22d0001fd14",
//     "8078efb0ba6ef5ed0001fd14",
// ];

static OPUS_PACKETS: &[&[u8]] = &[
    &[
        0xFC, 0xD0, 0x14, 0x66, 0x41, 0x9E, 0xDA, 0x97, 0xF7, 0xD1, 0x81, 0xDB, 0xEA, 0x5F, 0xAD,
        0x45, 0xE4, 0xA3, 0x5F, 0x4C, 0xF0, 0x7F, 0xCA, 0x93, 0x8C, 0xA8, 0x45, 0x6C, 0x59, 0x0E,
        0x0A, 0xFC, 0xD5, 0x3E, 0x0F, 0xC2, 0xE5, 0x81, 0x48, 0x57, 0x9E, 0xF6, 0xD2, 0xA1, 0x06,
        0xD8, 0x8B, 0xA6, 0x43, 0x27, 0x3F, 0xA0, 0x14, 0xF6, 0xED, 0x4F, 0x15, 0x6F, 0x23, 0xEC,
        0x54, 0x43, 0xAE, 0xF1, 0x6B, 0x0D, 0xEA, 0x37, 0x24, 0x7D, 0x5F, 0x92, 0x39, 0xA5, 0x5A,
        0xD9, 0xE2, 0x8C, 0x14, 0x34, 0xC1, 0x79, 0x7D, 0x1D, 0x09, 0x0E, 0xA2, 0x30, 0xA9, 0xA3,
        0xEC, 0x0E, 0x48, 0x78, 0xBF, 0xB6, 0xBA, 0x82, 0xB5, 0x79, 0xA3, 0xCB, 0x7C, 0xAA, 0x66,
        0xA9, 0xD5, 0x58, 0x4E, 0x2C, 0xF9, 0x20, 0xCC, 0x78, 0xB8, 0x13, 0xB2, 0x13, 0x10, 0x16,
        0x0F, 0x52, 0xEF, 0x99, 0xAC, 0x27, 0xEE, 0xF1, 0x81, 0x58, 0x75, 0x53, 0x5A, 0xDD, 0x30,
        0x1F, 0x2B, 0xD9, 0x08, 0x67, 0xD9, 0x70, 0xF4, 0x79, 0x0B, 0x2A, 0xFF, 0x9E, 0xB2, 0x4A,
        0x7C, 0x28, 0x76, 0xD0, 0x4E, 0xA2, 0x9A, 0x05, 0x9D, 0xD2, 0xFB, 0x6C, 0x39, 0xBF, 0x73,
        0xDF, 0x79, 0xF4, 0x22, 0x81, 0xD6, 0xE8, 0x3D, 0x63, 0x41, 0xE4, 0x11, 0x89, 0x1D, 0x6F,
        0xE4, 0x1B, 0xED, 0xF9, 0x3C, 0x9D, 0x55, 0xE2, 0xE8, 0x10, 0x15, 0x29, 0xE1, 0x77, 0x25,
        0xD2, 0xBD, 0x60, 0xBE, 0x4A, 0x6C, 0x7C, 0x83, 0x48, 0xB1, 0xA5, 0x4F, 0xC7, 0x49, 0x4F,
        0x3E, 0xCD, 0x36, 0x8A, 0xB8, 0x32, 0x90, 0x4B, 0xF6, 0xE7, 0xB9, 0x27, 0xC8, 0x65, 0x32,
        0x55, 0x79, 0xBF, 0xAA, 0xBE, 0xEE, 0x39, 0x76, 0xD0, 0xB2, 0x1D, 0x3B, 0x3D, 0x64, 0x22,
        0x73, 0xA6, 0x3A, 0x99, 0xBB, 0x50, 0xE7, 0x8C, 0xD5, 0x09, 0x58, 0xA5, 0x62, 0x32, 0xFA,
        0x2D, 0x90, 0x89, 0x0B, 0xF2, 0xDB,
    ],
    &[
        0xFC, 0xD0, 0x59, 0x16, 0x0E, 0x93, 0x26, 0xBC, 0x6A, 0xD1, 0x97, 0x14, 0x09, 0x02, 0xDF,
        0xB7, 0xC2, 0x4C, 0x1A, 0x6B, 0xC6, 0x31, 0xDF, 0xF1, 0x9B, 0x8B, 0xB5, 0x05, 0x34, 0xA1,
        0x61, 0x7B, 0x81, 0xF2, 0x83, 0xD8, 0x4E, 0xAE, 0x84, 0x52, 0x1C, 0xB0, 0xB6, 0xEB, 0xDD,
        0xB2, 0x20, 0x83, 0xF7, 0x0C, 0x75, 0x7F, 0x69, 0xE3, 0xFD, 0xD1, 0xEE, 0x69, 0x4F, 0xE4,
        0x8C, 0xEB, 0xF7, 0x7B, 0x75, 0xC0, 0xE8, 0x9C, 0xB5, 0xF2, 0xB1, 0x63, 0x8D, 0xBA, 0xF8,
        0xB0, 0x4D, 0xDB, 0xCE, 0xA0, 0x75, 0xA9, 0x9E, 0xB3, 0x64, 0x30, 0x67, 0x3F, 0x6B, 0x45,
        0x9B, 0x6B, 0x0C, 0xA4, 0x7C, 0x1A, 0x5F, 0x35, 0x56, 0xAB, 0x20, 0xA5, 0x6F, 0xD0, 0xF3,
        0x41, 0x1B, 0x3F, 0x4B, 0x1A, 0x7B, 0xE3, 0x28, 0xF6, 0xAB, 0x07, 0x13, 0x94, 0xBE, 0x3E,
        0x2B, 0xA9, 0x19, 0x54, 0xA6, 0x0D, 0xD3, 0x36, 0xFF, 0xB6, 0xAC, 0x55, 0xE1, 0xEF, 0x55,
        0x6E, 0x4C, 0x00, 0x5A, 0xB7, 0xC1, 0xF5, 0x37, 0xC9, 0x73, 0x0D, 0x4C, 0x5C, 0x79, 0x79,
        0xCA, 0x41, 0x34, 0x2B, 0xFC, 0xF0, 0xAE, 0x29, 0xC6, 0x27, 0x2D, 0x9C, 0x5F, 0xEE, 0x76,
        0x1E, 0xE3, 0x47, 0x9F, 0x96, 0x28, 0x3B, 0x10, 0xFF, 0x54, 0x21, 0xD0, 0xE9, 0xF8, 0xD8,
        0xEE, 0x7D, 0x9C, 0xDE, 0x98, 0x34, 0xE8, 0x5F, 0xA0, 0x65, 0xB1, 0x2D, 0x8D, 0xC4, 0x6E,
        0xCC, 0x77, 0xFC, 0x32, 0x08, 0x24, 0xD0, 0xB2, 0x4F, 0x4D, 0x6F, 0xF4, 0x4D, 0xC5, 0x06,
        0xA9, 0xDC, 0x7B, 0xEE, 0xCF, 0xC8, 0xF9, 0xB8, 0x51, 0xC9, 0xFF, 0xDD, 0x72, 0x60, 0x0F,
        0xDF, 0xBB, 0x91, 0xD5, 0xBA, 0x59, 0x72, 0x79, 0xF7, 0x7A, 0xA0, 0x6F, 0x4F, 0x21, 0x75,
        0x48, 0xA4, 0xF1, 0x04, 0x57, 0x99, 0x4A, 0x05, 0x5F, 0x62, 0x6D, 0xE2, 0x7D, 0xD6, 0x6B,
        0x48, 0x1C, 0x06, 0xB3, 0xD1, 0x6B, 0x5B, 0x22, 0x82, 0x05, 0xA2, 0x4E, 0x73, 0xA9, 0x1E,
        0xDB,
    ],
    &[
        0xFC, 0xD0, 0x59, 0x18, 0x74, 0x78, 0x94, 0xCE, 0x6E, 0x20, 0x72, 0x17, 0x9A, 0xB5, 0xDD,
        0x69, 0x1F, 0x0F, 0x49, 0x57, 0x72, 0x42, 0xA3, 0x90, 0x30, 0x70, 0xDA, 0xAB, 0x7E, 0xA1,
        0x31, 0x72, 0x3B, 0x94, 0x97, 0x68, 0x6E, 0xF7, 0xAA, 0x21, 0xEB, 0xAA, 0xFA, 0xCC, 0x99,
        0x6B, 0x70, 0x92, 0x3F, 0x73, 0xDE, 0x08, 0xBB, 0x73, 0x19, 0x2E, 0x28, 0x35, 0x74, 0xC7,
        0xF9, 0x9A, 0xC0, 0x91, 0xA7, 0xA1, 0x1C, 0xD9, 0x25, 0xD4, 0xD9, 0x41, 0x9F, 0x0D, 0x89,
        0x59, 0x49, 0x0D, 0xE7, 0x61, 0xF5, 0x15, 0xFB, 0x35, 0xAA, 0xDD, 0x8D, 0xDC, 0x8B, 0x68,
        0x81, 0xDF, 0x7E, 0x27, 0x52, 0x55, 0x79, 0x58, 0x96, 0x3D, 0x17, 0xCE, 0x2F, 0x4D, 0xF1,
        0x70, 0xCA, 0xA0, 0x83, 0x27, 0x4B, 0x6F, 0x48, 0x1E, 0x4E, 0xC4, 0xEA, 0x1A, 0x40, 0xFF,
        0xC0, 0x76, 0xB0, 0x4F, 0x62, 0x4F, 0x3B, 0x42, 0x8C, 0xAA, 0xE0, 0xB6, 0x39, 0xE2, 0x32,
        0x26, 0x17, 0xEF, 0xC3, 0x8C, 0xB1, 0x31, 0x66, 0x8C, 0xCA, 0x17, 0xC8, 0x1D, 0x29, 0x0B,
        0x32, 0xD3, 0xAB, 0xC0, 0x90, 0x4F, 0xE6, 0x76, 0x6F, 0x34, 0x9F, 0xE6, 0x64, 0x3F, 0xA2,
        0xC5, 0xF3, 0xE3, 0x53, 0x21, 0xF2, 0xF9, 0x7E, 0x83, 0x3C, 0xB9, 0x43, 0xC0, 0xF2, 0xFE,
        0x64, 0x9B, 0x37, 0xB2, 0xF7, 0x55, 0xE1, 0x7A, 0x6D, 0x42, 0x25, 0x40, 0xF6, 0x8B, 0x84,
        0xA6, 0xEF, 0xBE, 0xF2, 0xF6, 0x83, 0xEF, 0xFD, 0xAE, 0x4A, 0xCD, 0x71, 0xAF, 0x22, 0xB9,
        0xEB, 0x1C, 0x02, 0xBA, 0x82, 0x87, 0xD6, 0x2B, 0x94, 0x2B, 0x77, 0x50, 0xB4, 0x35, 0xB6,
        0x37, 0x17, 0x62, 0x59, 0x48, 0xE9, 0xA2, 0xFA, 0x95, 0x29, 0xC0, 0x13, 0x1B, 0x4E, 0x33,
        0x7F, 0xD0, 0xD1, 0x20, 0x4A, 0x55, 0xFF, 0x7B, 0x63, 0xC9, 0x23, 0x38, 0xFC, 0xEB, 0x36,
        0xDB,
    ],
];

static DISPATCHED_PACKETS: &[&str] = &[
    include_str!("../../assets/packets/first.txt"),
    include_str!("../../assets/packets/second.txt"),
    include_str!("../../assets/packets/third.txt"),
];

const SECRET_KEY: &[u8; AEAD_KEY_LEN] = &[
    4, 162, 78, 247, 31, 141, 75, 181, 6, 245, 70, 6, 1, 71, 28, 160, 188, 248, 244, 137, 219, 99,
    211, 115, 84, 137, 240, 144, 215, 212, 84, 131,
];

const STARTING_NONCE: u32 = 28;
const STARTING_SEQ: u16 = 61358;
const STARTING_TIMESTAMP: u32 = 3127832173;
const SSRC: u32 = 130324;

#[test]
fn test_encrypt() {
    let fake_info = ConnectionInfo {
        endpoint: "".into(),
        guild_id: Id::new(1),
        session_id: "".into(),
        token: Token::new("".to_string().into_boxed_str()),
        user_id: Id::new(1),
    };

    let mut client = VoiceClient::new(fake_info);
    client.encryptor = Some(Box::new(XChaCha20Poly1035::new_sized(SECRET_KEY)));
    client.session = Some(VoiceClientSession {
        ip: IpAddr::V4(Ipv4Addr::new(127, 0, 0, 1)),
        port: 3000,
        mode: EncryptMode::XChaCha20Poly1305,
        nonce: STARTING_NONCE,
        sequence: STARTING_SEQ,
        timestamp: STARTING_TIMESTAMP,
        ssrc: SSRC,
        queued_packet: None,
        given_initial_users: false,
    });

    assert_eq!(
        OPUS_PACKETS.len(),
        DISPATCHED_PACKETS.len(),
        "unequal test samples"
    );
    for (case, (raw, expected)) in OPUS_PACKETS
        .iter()
        .zip(DISPATCHED_PACKETS.iter())
        .enumerate()
    {
        println!("Dispatch test packet #{}", case + 1);

        let dispatched = client.dispatch_packet(&raw).unwrap();
        let expected = hex::decode(expected).unwrap();
        assert_eq!(expected, dispatched);
    }
}
